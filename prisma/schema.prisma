generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  name               String
  password           String
  role               UserRole               @default(TEACHER)
  avatar             String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  groupId            String?
  isActive           Boolean                @default(true)
  level              String?
  bio                String?
  phone              String?
  timezone           String?
  preferences        Json?
  totalLessons       Int                    @default(0)
  completedLessons   Int                    @default(0)
  averageRating      Float?
  lastActive         DateTime               @default(now())
  submissions        AssignmentSubmission[]
  createdAssignments Assignment[]           @relation("TeacherAssignments")
  groups             Group[]                @relation("TeacherGroups")
  attendance         LessonAttendance[]     @relation("StudentAttendance")
  feedbacks          LessonFeedback[]       @relation("StudentFeedback")
  notifications      Notification[]
  group              Group?                 @relation("StudentGroup", fields: [groupId], references: [id])
  studentLessons     Lesson[]               @relation("StudentLessons")
  enrolledCourses    Course[]               @relation("UserEnrollments")
  lessons            Lesson[]               @relation("TeacherLessons")

  @@map("users")
}

model Course {
  id             String   @id @default(cuid())
  name           String
  description    String?
  level          String
  duration       Int
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  thumbnail      String?
  difficulty     String
  category       String?
  tags           String[]
  totalStudents  Int      @default(0)
  totalGroups    Int      @default(0)
  averageRating  Float?
  completionRate Float?
  groups         Group[]
  topics         Topic[]
  enrollments    User[]   @relation("UserEnrollments")

  @@map("courses")
}

model Topic {
  id                String   @id @default(cuid())
  name              String
  description       String?
  order             Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  estimatedDuration Int?
  materials         String[]
  objectives        String[]
  courseId          String
  completionRate    Float?
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons           Lesson[]
  nextTopicLessons  Lesson[] @relation("NextTopicLessons")

  @@map("topics")
}

model Lesson {
  id            String             @id @default(cuid())
  title         String
  description   String?
  date          DateTime
  startTime     String             // Format: "14:00"
  endTime       String             // Format: "15:00"
  duration      Int                // Duration in minutes
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  meetingLink   String?            // For scheduled lessons
  notes         String?            // Teacher notes
  materials     String[]           // URLs to lesson materials
  
  // Recording fields (for completed lessons)
  youtubeLink   String?            // YouTube recording URL
  transcript    String?            // Lesson transcript
  isPublished   Boolean            @default(false)
  viewCount     Int                @default(0)
  averageRating Float?
  totalFeedback Int                @default(0)
  
  // Lesson metadata
  teacherId     String
  groupId       String?
  topicId       String?
  nextTopicId   String?            // Next lesson's topic ID
  lessonType    LessonType
  status        LessonStatus       @default(SCHEDULED)
  
  // Relations
  teacher       User               @relation("TeacherLessons", fields: [teacherId], references: [id], onDelete: Cascade)
  group         Group?             @relation("GroupLessons", fields: [groupId], references: [id], onDelete: Cascade)
  topic         Topic?             @relation(fields: [topicId], references: [id], onDelete: SetNull)
  nextTopic     Topic?             @relation("NextTopicLessons", fields: [nextTopicId], references: [id], onDelete: SetNull)
  students      User[]             @relation("StudentLessons")
  attendance    LessonAttendance[]
  feedbacks     LessonFeedback[]
  attachments   Attachment[]

  @@map("lessons")
}

model Group {
  id              String       @id @default(cuid())
  name            String
  description     String?
  level           String
  maxStudents     Int          @default(20)
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  startDate       DateTime?
  endDate         DateTime?
  schedule        Json?
  meetingLink     String?
  teacherId       String
  courseId        String
  currentStudents Int          @default(0)
  totalLessons    Int          @default(0)
  averageRating   Float?
  assignments     Assignment[]
  course          Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher         User         @relation("TeacherGroups", fields: [teacherId], references: [id], onDelete: Cascade)
  students        User[]       @relation("StudentGroup")
  lessons         Lesson[]     @relation("GroupLessons")

  @@unique([name, teacherId])
  @@map("groups")
}



model Attachment {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime  @default(now())
  description  String?
  category     String?
  lessonId     String
  lesson       Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model LessonFeedback {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  isAnonymous Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  helpful     Boolean?
  category    String?
  studentId   String
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student     User      @relation("StudentFeedback", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@map("lesson_feedbacks")
}

model LessonAttendance {
  id            String           @id @default(cuid())
  lessonId      String
  studentId     String
  status        AttendanceStatus
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  joinTime      DateTime?
  leaveTime     DateTime?
  participation Float?
  lesson        Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student       User              @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_attendance")
}

model Assignment {
  id          String                 @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  isActive    Boolean                @default(true)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  maxScore    Int?
  weight      Float?
  type        String
  teacherId   String
  groupId     String
  submissions AssignmentSubmission[]
  group       Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  teacher     User                   @relation("TeacherAssignments", fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  content      String?
  fileUrl      String?
  submittedAt  DateTime   @default(now())
  score        Float?
  feedback     String?
  assignmentId String
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum LessonType {
  GROUP
  INDIVIDUAL
  ASSIGNMENT
  QUIZ
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  PARTIAL
}

enum LessonStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}
