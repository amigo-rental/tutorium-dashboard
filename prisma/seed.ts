import { PrismaClient } from "@prisma/client";

import { hashPassword } from "../lib/auth/jwt";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting database seed...");

  // Create a teacher user
  const hashedPassword = await hashPassword("password123");

  const teacher = await prisma.user.upsert({
    where: { email: "teacher@tutorium.com" },
    update: {},
    create: {
      email: "teacher@tutorium.com",
      name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      password: hashedPassword,
      role: "TEACHER",
      avatar: "–ê–ü",
    },
  });

  console.log("‚úÖ Teacher created:", teacher.email);

  // Create groups
  const groups = await Promise.all([
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ A1 - –£—Ç—Ä–µ–Ω–Ω—è—è",
          teacherId: teacher.id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ A1 - –£—Ç—Ä–µ–Ω–Ω—è—è",
        description: "–£—Ç—Ä–µ–Ω–Ω—è—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        level: "A1",
        maxStudents: 6,
        teacherId: teacher.id,
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ A2 - –í–µ—á–µ—Ä–Ω—è—è",
          teacherId: teacher.id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ A2 - –í–µ—á–µ—Ä–Ω—è—è",
        description: "–í–µ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        level: "A2",
        maxStudents: 5,
        teacherId: teacher.id,
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ B1 - –ò–Ω—Ç–µ–Ω—Å–∏–≤",
          teacherId: teacher.id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ B1 - –ò–Ω—Ç–µ–Ω—Å–∏–≤",
        description: "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ B2",
        level: "B1",
        maxStudents: 4,
        teacherId: teacher.id,
      },
    }),
  ]);

  console.log("‚úÖ Groups created:", groups.length);

  // Create students (now as Users with STUDENT role)
  const students = await Promise.all([
    prisma.user.upsert({
      where: { email: "elena.garcia@example.com" },
      update: {},
      create: {
        name: "–ï–ª–µ–Ω–∞ –ì–∞—Ä—Å–∏—è",
        email: "elena.garcia@example.com",
        password: hashedPassword, // Students also need passwords
        role: "STUDENT",
        level: "A2",
        avatar: "–ï–ì",
        groupId: groups[1].id, // A2 group
      },
    }),
    prisma.user.upsert({
      where: { email: "mikhail.petrov@example.com" },
      update: {},
      create: {
        name: "–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤",
        email: "mikhail.petrov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B1",
        avatar: "–ú–ü",
        groupId: groups[2].id, // B1 group
      },
    }),
    prisma.user.upsert({
      where: { email: "anna.sidorova@example.com" },
      update: {},
      create: {
        name: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
        email: "anna.sidorova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A1",
        avatar: "–ê–°",
        groupId: groups[0].id, // A1 group
      },
    }),
    prisma.user.upsert({
      where: { email: "dmitry.kozlov@example.com" },
      update: {},
      create: {
        name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        email: "dmitry.kozlov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B2",
        avatar: "–î–ö",
        // No group - individual student
      },
    }),
    prisma.user.upsert({
      where: { email: "maria.ivanova@example.com" },
      update: {},
      create: {
        name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
        email: "maria.ivanova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A2",
        avatar: "–ú–ò",
        groupId: groups[1].id, // A2 group
      },
    }),
  ]);

  console.log("‚úÖ Students created:", students.length);

  // Create sample recordings
  const recordings = await Promise.all([
    // A1 Group Recording
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-15"),
        youtubeLink: "https://youtube.com/watch?v=abc123",
        message:
          "–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∫! –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∏–ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-5 –≤ —Ä–∞–±–æ—á–µ–π —Ç–µ—Ç—Ä–∞–¥–∏.",
        teacherId: teacher.id,
        groupId: groups[0].id, // A1 group
      },
    }),
    
    // A2 Group Recording (Elena's group)
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-16"),
        youtubeLink: "https://youtube.com/watch?v=xyz789",
        message:
          "–£—Ä–æ–∫ –ø–æ —Ç–µ–º–µ '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'. –ò–∑—É—á–∏–ª–∏ –ª–µ–∫—Å–∏–∫—É –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–µ–ª—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏.",
        teacherId: teacher.id,
        groupId: groups[1].id, // A2 group (Elena's group)
      },
    }),
    
    // Another A2 Group Recording
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-18"),
        youtubeLink: "https://youtube.com/watch?v=mno456",
        message:
          "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è. –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ –ø–∞—Ä–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 6-10, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É.",
        teacherId: teacher.id,
        groupId: groups[1].id, // A2 group (Elena's group)
      },
    }),
    
    // Individual lesson for Elena
    prisma.recording.create({
      data: {
        lessonType: "INDIVIDUAL",
        date: new Date("2024-01-14"),
        youtubeLink: "https://youtube.com/watch?v=def456",
        message:
          "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ. –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏ –∏ –±–µ–≥–ª–æ—Å—Ç–∏ —Ä–µ—á–∏.",
        teacherId: teacher.id,
        students: {
          connect: [
            { id: students[0].id }, // Elena
            { id: students[1].id }, // Mikhail
          ],
        },
      },
    }),
    
    // Individual lesson specifically for Elena
    prisma.recording.create({
      data: {
        lessonType: "INDIVIDUAL",
        date: new Date("2024-01-20"),
        youtubeLink: "https://youtube.com/watch?v=pqr321",
        message:
          "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –ï–ª–µ–Ω—ã: —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –∑–≤—É–∫–∞ '—Ä' –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö. –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
        teacherId: teacher.id,
        students: {
          connect: [
            { id: students[0].id }, // Elena only
          ],
        },
      },
    }),
    
    // Recent A2 Group Recording
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-22"),
        youtubeLink: "https://youtube.com/watch?v=stu654",
        message:
          "–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: '–ú–æ–π –≥–æ—Ä–æ–¥'. –°—Ç—É–¥–µ–Ω—Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª–∏ –æ —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö. –ï–ª–µ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π!",
        teacherId: teacher.id,
        groupId: groups[1].id, // A2 group (Elena's group)
      },
    }),
    
    // Upcoming A2 Group Recording
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-25"),
        youtubeLink: "https://youtube.com/watch?v=vwx987",
        message:
          "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É A2. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º –º–µ—Å—è—Ü–∞. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ!",
        teacherId: teacher.id,
        groupId: groups[1].id, // A2 group (Elena's group)
      },
    }),
  ]);

  console.log("‚úÖ Recordings created:", recordings.length);

  // Create sample attachments for recordings
  const attachments = await Promise.all([
    // Attachments for Elena's group recordings
    prisma.attachment.create({
      data: {
        filename: "travel_vocabulary.pdf",
        originalName: "travel_vocabulary.pdf",
        mimeType: "application/pdf",
        size: 1024000,
        path: "/uploads/travel_vocabulary.pdf",
        recordingId: recordings[1].id, // A2 Travel lesson
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "future_tense_exercises.pdf",
        originalName: "future_tense_exercises.pdf",
        mimeType: "application/pdf",
        size: 512000,
        path: "/uploads/future_tense_exercises.pdf",
        recordingId: recordings[2].id, // A2 Future tense lesson
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "pronunciation_guide.mp3",
        originalName: "pronunciation_guide.mp3",
        mimeType: "audio/mpeg",
        size: 2048000,
        path: "/uploads/pronunciation_guide.mp3",
        recordingId: recordings[4].id, // Elena's individual lesson
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "city_presentation_template.pptx",
        originalName: "city_presentation_template.pptx",
        mimeType: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        size: 1536000,
        path: "/uploads/city_presentation_template.pptx",
        recordingId: recordings[5].id, // City presentation lesson
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "a2_test_preparation.pdf",
        originalName: "a2_test_preparation.pdf",
        mimeType: "application/pdf",
        size: 768000,
        path: "/uploads/a2_test_preparation.pdf",
        recordingId: recordings[6].id, // A2 test preparation
      },
    }),
  ]);

  console.log("‚úÖ Attachments created:", attachments.length);

  // Create lesson feedback
  console.log("Creating lesson feedback...");
  const feedbacks = await Promise.all([
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment: "–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∫! –í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª–∏.",
        isAnonymous: false,
        studentId: students[0].id, // Elena Garcia
        recordingId: recordings[0].id, // Spanish A1 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 4,
        comment: "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–∫, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
        isAnonymous: false,
        studentId: students[1].id, // Maria Rodriguez
        recordingId: recordings[1].id, // Spanish A2 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.",
        isAnonymous: true,
        studentId: students[2].id, // Carlos Mendez
        recordingId: recordings[2].id, // English B1 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 3,
        comment: "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ª—É—á—à–µ.",
        isAnonymous: false,
        studentId: students[0].id, // Elena Garcia
        recordingId: recordings[3].id, // English B2 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 4,
        isAnonymous: true,
        studentId: students[1].id, // Maria Rodriguez
        recordingId: recordings[4].id, // Individual lesson
      },
    }),
  ]);

  console.log("‚úÖ Lesson feedback created:", feedbacks.length);

  console.log("üéâ Database seeding completed successfully!");
  console.log("\nüìã Test Account:");
  console.log("Email: teacher@tutorium.com");
  console.log("Password: password123");
}

main()
  .catch((e) => {
    console.error("‚ùå Error during seeding:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
