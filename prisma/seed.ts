import { PrismaClient } from "@prisma/client";

import { hashPassword } from "../lib/auth/jwt";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting database seed...");

  // Create users with hashed passwords
  const hashedPassword = await hashPassword("password123");

  // Create admin user
  const admin = await prisma.user.upsert({
    where: { email: "admin@tutorium.com" },
    update: {},
    create: {
      email: "admin@tutorium.com",
      name: "–ê–¥–º–∏–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      password: hashedPassword,
      role: "ADMIN",
      avatar: "–ê–ê",
    },
  });

  console.log("‚úÖ Admin created:", admin.email);

  // Create multiple teacher users
  const teachers = await Promise.all([
    prisma.user.upsert({
      where: { email: "teacher@tutorium.com" },
      update: {},
      create: {
        email: "teacher@tutorium.com",
        name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        password: hashedPassword,
        role: "TEACHER",
        avatar: "–ê–ü",
      },
    }),
    prisma.user.upsert({
      where: { email: "maria.gonzalez@tutorium.com" },
      update: {},
      create: {
        email: "maria.gonzalez@tutorium.com",
        name: "–ú–∞—Ä–∏—è –ì–æ–Ω—Å–∞–ª–µ—Å",
        password: hashedPassword,
        role: "TEACHER",
        avatar: "–ú–ì",
      },
    }),
    prisma.user.upsert({
      where: { email: "carlos.lopez@tutorium.com" },
      update: {},
      create: {
        email: "carlos.lopez@tutorium.com",
        name: "–ö–∞—Ä–ª–æ—Å –õ–æ–ø–µ—Å",
        password: hashedPassword,
        role: "TEACHER",
        avatar: "–ö–õ",
      },
    }),
  ]);

  console.log("‚úÖ Teachers created:", teachers.length);

  // Create courses
  const courses = await Promise.all([
    prisma.course.upsert({
      where: { id: "course-a1" },
      update: {},
      create: {
        id: "course-a1",
        name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö A1",
        description:
          "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –Ω–æ–≤–∏—á–∫–æ–≤. –ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤—ã –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, –ª–µ–∫—Å–∏–∫–∏ –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.",
        level: "A1",
        duration: 12, // 12 weeks
      },
    }),
    prisma.course.upsert({
      where: { id: "course-a2" },
      update: {},
      create: {
        id: "course-a2",
        name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö A2",
        description:
          "–ö—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –∑–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤—ã –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ. –£–≥–ª—É–±–ª—è–µ–º –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.",
        level: "A2",
        duration: 16, // 16 weeks
      },
    }),
    prisma.course.upsert({
      where: { id: "course-b1" },
      update: {},
      create: {
        id: "course-b1",
        name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å B1",
        description:
          "–ö—É—Ä—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —É—Ä–æ–≤–Ω—é B2. –§–æ–∫—É—Å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–µ.",
        level: "B1",
        duration: 20, // 20 weeks
      },
    }),
    prisma.course.upsert({
      where: { id: "course-b2" },
      update: {},
      create: {
        id: "course-b2",
        name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å B2",
        description:
          "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º.",
        level: "B2",
        duration: 24, // 24 weeks
      },
    }),
    prisma.course.upsert({
      where: { id: "course-c1" },
      update: {},
      create: {
        id: "course-c1",
        name: "–ò—Å–ø–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å C1",
        description:
          "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–∏–º —è–∑—ã–∫–æ–º. –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∏ –¥–µ–ª–æ–≤–æ–π –∏—Å–ø–∞–Ω—Å–∫–∏–π.",
        level: "C1",
        duration: 32, // 32 weeks
      },
    }),
  ]);

  console.log("‚úÖ Courses created:", courses.length);

  // Create topics for each course
  const topics = await Promise.all([
    // A1 Course Topics
    prisma.topic.create({
      data: {
        name: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
        description: "–ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —á–∏—Å–ª–∞ 1-10, –≥–ª–∞–≥–æ–ª 'ser'",
        order: 1,
        courseId: courses[0].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è",
        description:
          "–õ–µ–∫—Å–∏–∫–∞ –ø–æ —Ç–µ–º–µ —Å–µ–º—å–∏, –ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –≥–ª–∞–≥–æ–ª 'tener'",
        order: 2,
        courseId: courses[0].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏",
        description: "–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥–ª–∞–≥–æ–ª 'gustar', –∞—Ä—Ç–∏–∫–ª–∏",
        order: 3,
        courseId: courses[0].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ì–æ—Ä–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        description: "–ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–≥–∏ –º–µ—Å—Ç–∞",
        order: 4,
        courseId: courses[0].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–í—Ä–µ–º—è –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        description:
          "–ß–∞—Å—ã, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≥–ª–∞–≥–æ–ª—ã 'ser' –∏ 'estar', –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è",
        order: 5,
        courseId: courses[0].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ü–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–Ω—ã",
        description: "–ú–∞–≥–∞–∑–∏–Ω—ã, —Ü–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã, —á–∏—Å–ª–∞ 11-100",
        order: 6,
        courseId: courses[0].id,
      },
    }),

    // A2 Course Topics
    prisma.topic.create({
      data: {
        name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        description:
          "–ê—ç—Ä–æ–ø–æ—Ä—Ç, –æ—Ç–µ–ª—å, —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (pret√©rito indefinido)",
        order: 1,
        courseId: courses[1].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        description:
          "–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (pret√©rito imperfecto)",
        order: 2,
        courseId: courses[1].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞",
        description: "–ß–∞—Å—Ç–∏ —Ç–µ–ª–∞, —Å–∏–º–ø—Ç–æ–º—ã, –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤—Ä–∞—á–∞, –º–æ–¥–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã",
        order: 3,
        courseId: courses[1].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
        description:
          "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏, –æ–±—ã—á–∞–∏, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        order: 4,
        courseId: courses[1].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        description: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è",
        order: 5,
        courseId: courses[1].id,
      },
    }),

    // B1 Course Topics
    prisma.topic.create({
      data: {
        name: "–î–µ–ª–æ–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        description:
          "–î–µ–ª–æ–≤—ã–µ –ø–∏—Å—å–º–∞, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
        order: 1,
        courseId: courses[2].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∏—Å–ø–∞–Ω—Å–∫–∏–π",
        description:
          "–ù–∞—É—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è, –¥–∏—Å–∫—É—Å—Å–∏–∏, —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        order: 2,
        courseId: courses[2].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        description:
          "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–µ–º—ã",
        order: 3,
        courseId: courses[2].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
        description: "–≠–∫–æ–ª–æ–≥–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–ª–∏—Ç–∏–∫–∞, –¥–∏—Å–∫—É—Å—Å–∏–∏",
        order: 4,
        courseId: courses[2].id,
      },
    }),

    // B2 Course Topics
    prisma.topic.create({
      data: {
        name: "–°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞",
        description: "Subjuntivo, —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥",
        order: 1,
        courseId: courses[3].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ò–¥–∏–æ–º—ã –∏ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º—ã",
        description: "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Å–ª–µ–Ω–≥, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        order: 2,
        courseId: courses[3].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤",
        description: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        order: 3,
        courseId: courses[3].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ü–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å",
        description: "–≠—Å—Å–µ, –æ—Ç—á–µ—Ç—ã, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞",
        order: 4,
        courseId: courses[3].id,
      },
    }),

    // C1 Course Topics
    prisma.topic.create({
      data: {
        name: "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ",
        description: "–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
        order: 1,
        courseId: courses[4].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ü–µ—Ä–µ–≤–æ–¥ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        description:
          "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è",
        order: 2,
        courseId: courses[4].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        description: "–§–æ–Ω–µ—Ç–∏–∫–∞, –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —Å–µ–º–∞–Ω—Ç–∏–∫–∞",
        order: 3,
        courseId: courses[4].id,
      },
    }),
    prisma.topic.create({
      data: {
        name: "–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è",
        description:
          "–ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
        order: 4,
        courseId: courses[4].id,
      },
    }),
  ]);

  console.log("‚úÖ Topics created:", topics.length);

  // Create groups (now belonging to courses)
  const groups = await Promise.all([
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ A1 - –£—Ç—Ä–µ–Ω–Ω—è—è",
          teacherId: teachers[0].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ A1 - –£—Ç—Ä–µ–Ω–Ω—è—è",
        description:
          "–£—Ç—Ä–µ–Ω–Ω—è—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ó–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 10:00.",
        level: "A1",
        maxStudents: 6,
        teacherId: teachers[0].id,
        courseId: courses[0].id, // A1 course
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ A1 - –í–µ—á–µ—Ä–Ω—è—è",
          teacherId: teachers[0].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ A1 - –í–µ—á–µ—Ä–Ω—è—è",
        description:
          "–í–µ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ó–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 19:00.",
        level: "A1",
        maxStudents: 8,
        teacherId: teachers[0].id,
        courseId: courses[0].id, // A1 course
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ A2 - –í–µ—á–µ—Ä–Ω—è—è",
          teacherId: teachers[0].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ A2 - –í–µ—á–µ—Ä–Ω—è—è",
        description:
          "–í–µ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö. –ó–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —Å—Ä–µ–¥–∞–º –≤ 20:00.",
        level: "A2",
        maxStudents: 5,
        teacherId: teachers[0].id,
        courseId: courses[1].id, // A2 course
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ B1 - –ò–Ω—Ç–µ–Ω—Å–∏–≤",
          teacherId: teachers[1].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ B1 - –ò–Ω—Ç–µ–Ω—Å–∏–≤",
        description:
          "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ B2. –ó–∞–Ω—è—Ç–∏—è 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 2 —á–∞—Å–∞.",
        level: "B1",
        maxStudents: 4,
        teacherId: teachers[1].id,
        courseId: courses[2].id, // B1 course
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ B2 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É",
          teacherId: teachers[1].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ B2 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É",
        description:
          "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º DELE B2. –ó–∞–Ω—è—Ç–∏—è –ø–æ —Å—É–±–±–æ—Ç–∞–º –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º.",
        level: "B2",
        maxStudents: 6,
        teacherId: teachers[1].id,
        courseId: courses[3].id, // B2 course
      },
    }),
    prisma.group.upsert({
      where: {
        name_teacherId: {
          name: "–ì—Ä—É–ø–ø–∞ C1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
          teacherId: teachers[2].id,
        },
      },
      update: {},
      create: {
        name: "–ì—Ä—É–ø–ø–∞ C1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
        description:
          "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤. –ó–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º.",
        level: "C1",
        maxStudents: 3,
        teacherId: teachers[2].id,
        courseId: courses[4].id, // C1 course
      },
    }),
  ]);

  console.log("‚úÖ Groups created:", groups.length);

  // Create students (now as Users with STUDENT role)
  const students = await Promise.all([
    prisma.user.upsert({
      where: { email: "elena.garcia@example.com" },
      update: {},
      create: {
        name: "–ï–ª–µ–Ω–∞ –ì–∞—Ä—Å–∏—è",
        email: "elena.garcia@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A2",
        avatar: "–ï–ì",
        groupId: groups[2].id, // A2 group
      },
    }),
    prisma.user.upsert({
      where: { email: "mikhail.petrov@example.com" },
      update: {},
      create: {
        name: "–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤",
        email: "mikhail.petrov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B1",
        avatar: "–ú–ü",
        groupId: groups[3].id, // B1 group
      },
    }),
    prisma.user.upsert({
      where: { email: "anna.sidorova@example.com" },
      update: {},
      create: {
        name: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
        email: "anna.sidorova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A1",
        avatar: "–ê–°",
        groupId: groups[0].id, // A1 morning group
      },
    }),
    prisma.user.upsert({
      where: { email: "dmitry.kozlov@example.com" },
      update: {},
      create: {
        name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        email: "dmitry.kozlov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B2",
        avatar: "–î–ö",
        groupId: groups[4].id, // B2 group
      },
    }),
    prisma.user.upsert({
      where: { email: "maria.ivanova@example.com" },
      update: {},
      create: {
        name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
        email: "maria.ivanova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A2",
        avatar: "–ú–ò",
        groupId: groups[2].id, // A2 group
      },
    }),
    prisma.user.upsert({
      where: { email: "alexander.smirnov@example.com" },
      update: {},
      create: {
        name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤",
        email: "alexander.smirnov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A1",
        avatar: "–ê–°",
        groupId: groups[1].id, // A1 evening group
      },
    }),
    prisma.user.upsert({
      where: { email: "olga.volkova@example.com" },
      update: {},
      create: {
        name: "–û–ª—å–≥–∞ –í–æ–ª–∫–æ–≤–∞",
        email: "olga.volkova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "C1",
        avatar: "–û–í",
        groupId: groups[5].id, // C1 group
      },
    }),
    prisma.user.upsert({
      where: { email: "sergey.novikov@example.com" },
      update: {},
      create: {
        name: "–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤",
        email: "sergey.novikov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B1",
        avatar: "–°–ù",
        groupId: groups[3].id, // B1 group
      },
    }),
    prisma.user.upsert({
      where: { email: "natalia.kuznetsova@example.com" },
      update: {},
      create: {
        name: "–ù–∞—Ç–∞–ª—å—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
        email: "natalia.kuznetsova@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "A1",
        avatar: "–ù–ö",
        groupId: groups[0].id, // A1 morning group
      },
    }),
    prisma.user.upsert({
      where: { email: "vladimir.sokolov@example.com" },
      update: {},
      create: {
        name: "–í–ª–∞–¥–∏–º–∏—Ä –°–æ–∫–æ–ª–æ–≤",
        email: "vladimir.sokolov@example.com",
        password: hashedPassword,
        role: "STUDENT",
        level: "B2",
        avatar: "–í–°",
        groupId: groups[4].id, // B2 group
      },
    }),
  ]);

  console.log("‚úÖ Students created:", students.length);

  // Automatically enroll students in courses based on their groups
  console.log("Enrolling students in courses...");
  const enrollments = await Promise.all([
    // Elena Garcia - A2 course (via A2 group)
    prisma.user.update({
      where: { id: students[0].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[1].id }, // A2 course
        },
      },
    }),
    // Mikhail Petrov - B1 course (via B1 group)
    prisma.user.update({
      where: { id: students[1].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[2].id }, // B1 course
        },
      },
    }),
    // Anna Sidorova - A1 course (via A1 morning group)
    prisma.user.update({
      where: { id: students[2].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[0].id }, // A1 course
        },
      },
    }),
    // Dmitry Kozlov - B2 course (via B2 group)
    prisma.user.update({
      where: { id: students[3].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[3].id }, // B2 course
        },
      },
    }),
    // Maria Ivanova - A2 course (via A2 group)
    prisma.user.update({
      where: { id: students[4].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[1].id }, // A2 course
        },
      },
    }),
    // Alexander Smirnov - A1 course (via A1 evening group)
    prisma.user.update({
      where: { id: students[5].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[0].id }, // A1 course
        },
      },
    }),
    // Olga Volkova - C1 course (via C1 group)
    prisma.user.update({
      where: { id: students[6].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[4].id }, // C1 course
        },
      },
    }),
    // Sergey Novikov - B1 course (via B1 group)
    prisma.user.update({
      where: { id: students[7].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[2].id }, // B1 course
        },
      },
    }),
    // Natalia Kuznetsova - A1 course (via A1 morning group)
    prisma.user.update({
      where: { id: students[8].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[0].id }, // A1 course
        },
      },
    }),
    // Vladimir Sokolov - B2 course (via B2 group)
    prisma.user.update({
      where: { id: students[9].id },
      data: {
        enrolledCourses: {
          connect: { id: courses[3].id }, // B2 course
        },
      },
    }),
  ]);

  console.log("‚úÖ Course enrollments created:", enrollments.length);

  // Create sample recordings for different groups
  const recordings = await Promise.all([
    // A1 Morning Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-15"),
        youtubeLink: "https://youtube.com/watch?v=a1_lesson1",
        message:
          "–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∫! –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —á–∏—Å–ª–∞ 1-10. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-5 –≤ —Ä–∞–±–æ—á–µ–π —Ç–µ—Ç—Ä–∞–¥–∏.",
        teacherId: teachers[0].id,
        groupId: groups[0].id, // A1 morning group
      },
    }),
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-17"),
        youtubeLink: "https://youtube.com/watch?v=a1_lesson2",
        message:
          "–ò–∑—É—á–∏–ª–∏ —Ç–µ–º—É '–°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è'. –ì–ª–∞–≥–æ–ª 'tener' –∏ –ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–≤–æ–µ–π —Å–µ–º—å–µ.",
        teacherId: teachers[0].id,
        groupId: groups[0].id, // A1 morning group
      },
    }),

    // A1 Evening Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-16"),
        youtubeLink: "https://youtube.com/watch?v=a1_evening1",
        message:
          "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤–µ—á–µ—Ä–Ω–µ–π –≥—Ä—É–ø–ø—ã! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –≤—ã—É—á–∏—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç.",
        teacherId: teachers[0].id,
        groupId: groups[1].id, // A1 evening group
      },
    }),

    // A2 Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-16"),
        youtubeLink: "https://youtube.com/watch?v=a2_lesson1",
        message:
          "–£—Ä–æ–∫ –ø–æ —Ç–µ–º–µ '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'. –ò–∑—É—á–∏–ª–∏ –ª–µ–∫—Å–∏–∫—É –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–µ–ª—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏.",
        teacherId: teachers[0].id,
        groupId: groups[2].id, // A2 group
      },
    }),
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-18"),
        youtubeLink: "https://youtube.com/watch?v=a2_lesson2",
        message:
          "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (pret√©rito indefinido). –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ –ø–∞—Ä–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 6-10.",
        teacherId: teachers[0].id,
        groupId: groups[2].id, // A2 group
      },
    }),

    // B1 Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-15"),
        youtubeLink: "https://youtube.com/watch?v=b1_lesson1",
        message:
          "–î–µ–ª–æ–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è. –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–ø–∏—Å–∞—Ç—å –¥–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ.",
        teacherId: teachers[1].id,
        groupId: groups[3].id, // B1 group
      },
    }),
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-17"),
        youtubeLink: "https://youtube.com/watch?v=b1_lesson2",
        message:
          "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∏—Å–ø–∞–Ω—Å–∫–∏–π. –ù–∞—É—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏.",
        teacherId: teachers[1].id,
        groupId: groups[3].id, // B1 group
      },
    }),

    // B2 Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-20"),
        youtubeLink: "https://youtube.com/watch?v=b2_lesson1",
        message:
          "–°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞: Subjuntivo. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É DELE B2. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
        teacherId: teachers[1].id,
        groupId: groups[4].id, // B2 group
      },
    }),

    // C1 Group Recordings
    prisma.recording.create({
      data: {
        lessonType: "GROUP",
        date: new Date("2024-01-21"),
        youtubeLink: "https://youtube.com/watch?v=c1_lesson1",
        message:
          "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é.",
        teacherId: teachers[2].id,
        groupId: groups[5].id, // C1 group
      },
    }),

    // Individual lessons
    prisma.recording.create({
      data: {
        lessonType: "INDIVIDUAL",
        date: new Date("2024-01-14"),
        youtubeLink: "https://youtube.com/watch?v=individual1",
        message:
          "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ. –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏ –∏ –±–µ–≥–ª–æ—Å—Ç–∏ —Ä–µ—á–∏.",
        teacherId: teachers[0].id,
        students: {
          connect: [
            { id: students[0].id }, // Elena
            { id: students[1].id }, // Mikhail
          ],
        },
      },
    }),
  ]);

  console.log("‚úÖ Recordings created:", recordings.length);

  // Create sample attachments for recordings
  const attachments = await Promise.all([
    // A1 Morning Group Attachments
    prisma.attachment.create({
      data: {
        filename: "a1_greetings_worksheet.pdf",
        originalName: "a1_greetings_worksheet.pdf",
        mimeType: "application/pdf",
        size: 512000,
        path: "/uploads/a1_greetings_worksheet.pdf",
        recordingId: recordings[0].id, // A1 lesson 1
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "a1_family_vocabulary.pdf",
        originalName: "a1_family_vocabulary.pdf",
        mimeType: "application/pdf",
        size: 768000,
        path: "/uploads/a1_family_vocabulary.pdf",
        recordingId: recordings[1].id, // A1 lesson 2
      },
    }),

    // A2 Group Attachments
    prisma.attachment.create({
      data: {
        filename: "a2_travel_vocabulary.pdf",
        originalName: "a2_travel_vocabulary.pdf",
        mimeType: "application/pdf",
        size: 1024000,
        path: "/uploads/a2_travel_vocabulary.pdf",
        recordingId: recordings[3].id, // A2 travel lesson
      },
    }),
    prisma.attachment.create({
      data: {
        filename: "a2_past_tense_exercises.pdf",
        originalName: "a2_past_tense_exercises.pdf",
        mimeType: "application/pdf",
        size: 512000,
        path: "/uploads/a2_past_tense_exercises.pdf",
        recordingId: recordings[4].id, // A2 grammar lesson
      },
    }),

    // B1 Group Attachments
    prisma.attachment.create({
      data: {
        filename: "b1_business_communication.pdf",
        originalName: "b1_business_communication.pdf",
        mimeType: "application/pdf",
        size: 1536000,
        path: "/uploads/b1_business_communication.pdf",
        recordingId: recordings[5].id, // B1 business lesson
      },
    }),

    // B2 Group Attachments
    prisma.attachment.create({
      data: {
        filename: "b2_subjuntivo_exercises.pdf",
        originalName: "b2_subjuntivo_exercises.pdf",
        mimeType: "application/pdf",
        size: 1024000,
        path: "/uploads/b2_subjuntivo_exercises.pdf",
        recordingId: recordings[6].id, // B2 grammar lesson
      },
    }),

    // C1 Group Attachments
    prisma.attachment.create({
      data: {
        filename: "c1_academic_writing.pdf",
        originalName: "c1_academic_writing.pdf",
        mimeType: "application/pdf",
        size: 2048000,
        path: "/uploads/c1_academic_writing.pdf",
        recordingId: recordings[7].id, // C1 writing lesson
      },
    }),
  ]);

  console.log("‚úÖ Attachments created:", attachments.length);

  // Create lesson feedback
  console.log("Creating lesson feedback...");
  const feedbacks = await Promise.all([
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment:
          "–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∫! –í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
        isAnonymous: false,
        studentId: students[0].id, // Elena Garcia
        recordingId: recordings[0].id, // A1 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 4,
        comment:
          "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–∫, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏.",
        isAnonymous: false,
        studentId: students[1].id, // Mikhail Petrov
        recordingId: recordings[4].id, // A2 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment:
          "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏.",
        isAnonymous: true,
        studentId: students[2].id, // Anna Sidorova
        recordingId: recordings[1].id, // A1 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 4,
        comment: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–æ —Ç–µ–º–ø –Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã–π –¥–ª—è –º–µ–Ω—è.",
        isAnonymous: false,
        studentId: students[3].id, // Dmitry Kozlov
        recordingId: recordings[5].id, // B1 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment:
          "–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∫! –ú–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É.",
        isAnonymous: true,
        studentId: students[4].id, // Maria Ivanova
        recordingId: recordings[3].id, // A2 lesson
      },
    }),
    prisma.lessonFeedback.create({
      data: {
        rating: 5,
        comment:
          "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
        isAnonymous: false,
        studentId: students[6].id, // Olga Volkova
        recordingId: recordings[7].id, // C1 lesson
      },
    }),
  ]);

  console.log("‚úÖ Lesson feedback created:", feedbacks.length);

  // Create lesson attendance records
  console.log("Creating lesson attendance...");
  const attendanceRecords = await Promise.all([
    // A1 Morning Group Attendance
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[0].id,
        studentId: students[2].id, // Anna Sidorova
        status: "PRESENT",
        notes: "–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ —É—Ä–æ–∫–µ",
      },
    }),
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[0].id,
        studentId: students[8].id, // Natalia Kuznetsova
        status: "PRESENT",
        notes: "–•–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏",
      },
    }),

    // A2 Group Attendance
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[3].id,
        studentId: students[0].id, // Elena Garcia
        status: "PRESENT",
        notes: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ",
      },
    }),
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[3].id,
        studentId: students[4].id, // Maria Ivanova
        status: "LATE",
        notes: "–û–ø–æ–∑–¥–∞–ª–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç",
      },
    }),

    // B1 Group Attendance
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[5].id,
        studentId: students[1].id, // Mikhail Petrov
        status: "PRESENT",
        notes: "–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏",
      },
    }),
    prisma.lessonAttendance.create({
      data: {
        lessonId: recordings[5].id,
        studentId: students[7].id, // Sergey Novikov
        status: "ABSENT",
        notes: "–ü–æ —Å–µ–º–µ–π–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º",
      },
    }),
  ]);

  console.log("‚úÖ Attendance records created:", attendanceRecords.length);

  console.log("üéâ Database seeding completed successfully!");
  console.log("\nüìã Test Accounts:");
  console.log("Admin Email: admin@tutorium.com");
  console.log("Teacher 1 Email: teacher@tutorium.com");
  console.log("Teacher 2 Email: maria.gonzalez@tutorium.com");
  console.log("Teacher 3 Email: carlos.lopez@tutorium.com");
  console.log("Password: password123");
  console.log("\nüìö Courses Available:");
  console.log("- A1: –ò—Å–ø–∞–Ω—Å–∫–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö (12 weeks)");
  console.log("- A2: –ò—Å–ø–∞–Ω—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö (16 weeks)");
  console.log("- B1: –ò—Å–ø–∞–Ω—Å–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (20 weeks)");
  console.log("- B2: –ò—Å–ø–∞–Ω—Å–∫–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (24 weeks)");
  console.log("- C1: –ò—Å–ø–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (32 weeks)");
  console.log("\nüë• Groups Created:");
  console.log("- 2 A1 groups (morning & evening)");
  console.log("- 1 A2 group");
  console.log("- 1 B1 intensive group");
  console.log("- 1 B2 exam preparation group");
  console.log("- 1 C1 professional group");
}

main()
  .catch((e) => {
    console.error("‚ùå Error during seeding:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
